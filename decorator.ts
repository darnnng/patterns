// Декоратор — это структурный паттерн проектирования, который позволяет динамически
// добавлять объектам новую функциональность, оборачивая их в полезные «обёртки».

//Оно более точно описывает суть паттерна: вы помещаете целевой объект в другой объект-обёртку,
//который запускает базовое поведение объекта, а затем добавляет к результату что-то своё.

//Декоратор класса представляет функцию, которая принимает один параметр: конструктор класса.

//Object.seal() запечатывает объект, предотвращая добавление новых свойств к объекту и делая все существующие свойства не настраиваемыми

function sealed(constructor: Function) {
    console.log("sealed decorator");
    Object.seal(constructor);
    Object.seal(constructor.prototype);
}
 
@sealed
class User {
    name: string;
    constructor(name: string){
        this.name = name;
    }
    print():void{
        console.log(this.name);
    }
}

//Декоратор sealed с помощью функции Object.seal запрещает расширение прототипа класса User

